# finishme

3 options how to handle data, in the context of current or pyco-ized prolog code:
    prolog terms, normally as it's now
        dataflow proof is generated in a metainterpreter, 
        or just in surrounding code,
        or not at all
    referenced from an l:value
        dataflow proofs are generated by the predicates that handle this form
        values:
            prolog terms
            triples
        



:todo :todo """
+ic_ui:transaction_input
+       excel:cardinality excel:multi;
+       excel:class ic:transaction;
+       excel:fields (
+               [excel:property ic:date]
+               [excel:property ic:primary_account]
+               [excel:property ic:action_verb]
+               [excel:property ic:debit]
+               [excel:property ic:credit]
+               [excel:property ic:currency]
+               [excel:property ic:description1]
+               [excel:property ic:description2]
+               [excel:property ic:description3]
+       ).


               [
+                       excel:root ic_ui:transaction_input;
+                       excel:optional true;
+                       excel:example_doc
+                               [
+                                       rdf:value ()
+                               ]
+               ]
        ).


"""



livestock standalone needs frontend server support for requesting xml result



failing because of a bug in calling arelle:
        ['endpoint_tests/ledger/ledger--with-schemaref']): testcase_error(http_code_400)
        ['endpoint_tests/ledger/historical_vs_current1']): testcase_error(http_code_400)
move arelle into python_server.
   


	reset_gensym(iri), % because we use gensym in investment reports and it will keep incrementing
	throughout the test-cases, causing fresh responses to not match saved responses.





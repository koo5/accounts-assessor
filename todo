account_id
account_by_id



https://www.swi-prolog.org/pldoc/doc_for?object=sort/4
sort has duplicate handling option



# finishme
3 options how to handle data, in the context of current or pyco-ized prolog code:
    prolog terms, normally as it's now
        dataflow proof is generated in a metainterpreter, 
        or just in surrounding code,
        or not at all
    referenced from an l:value
        dataflow proofs are generated by the predicates that handle this form
        values:
            prolog terms
            triples
        



:todo :todo """
+ic_ui:transaction_input
+       excel:cardinality excel:multi;
+       excel:class ic:transaction;
+       excel:fields (
+               [excel:property ic:date]
+               [excel:property ic:primary_account]
+               [excel:property ic:action_verb]
+               [excel:property ic:debit]
+               [excel:property ic:credit]
+               [excel:property ic:currency]
+               [excel:property ic:description1]
+               [excel:property ic:description2]
+               [excel:property ic:description3]
+       ).


               [
+                       excel:root ic_ui:transaction_input;
+                       excel:optional true;
+                       excel:example_doc
+                               [
+                                       rdf:value ()
+                               ]
+               ]
        ).


"""



livestock standalone needs frontend server support for requesting xml result



failing because of a bug in calling arelle:
        ['endpoint_tests/ledger/ledger--with-schemaref']): testcase_error(http_code_400)
        ['endpoint_tests/ledger/historical_vs_current1']): testcase_error(http_code_400)
move arelle into python_server.
   


	reset_gensym(iri), % because we use gensym in investment reports and it will keep incrementing
	throughout the test-cases, causing fresh responses to not match saved responses.





/*
todo:
debug
    This option enables or disables the possibility to debug the CHR code. Possible values are on (default) and off. See section 9.4 for more details on debugging. The default is derived from the Prolog flag generate_debug_info, which is true by default. See -nodebug. If debugging is enabled, optimization must be disabled.
generate_debug_info(bool, changeable)
    If true (default) generate code that can be debugged using trace/0, spy/1, etc. Can be set to false using the -nodebug. This flag is scoped within a source file. Many of the libraries have :- set_prolog_flag(generate_debug_info, false) to hide their details from a normal trace.20
swipl --nodebug
anyway, :- set_prolog_flag(generate_debug_info, false)
    --pldoc[=port]           Start PlDoc server [at port]
    --home=DIR               Use DIR as SWI-Prolog home
    --dump-runtime-variables[=format]
                        Dump link info in sh(1) format
editor(atom, changeable)
    Determines the editor used by edit/1. See section 4.4.1 for details on selecting the editor used.
backtrace_goal_depth(integer, changeable)
    The frame of a backtrace is printed after making a shallow copy of the goal. This flag determines the depth to which the goal term is copied. Default is `3'.
xref(bool, changeable)
    If true, source code is being read for analysis purposes such as cross-referencing. Otherwise (default) it is being read to be compiled. This flag is used at several places by term_expansion/2 and goal_expansion/2 hooks, notably if these hooks use side effects. See also the libraries library(prolog_source) and library(prolog_xref).
    */



<?xml version="1.0"?>


 <!-- reports:  {
  "alerts": [],
  "reports": [
    {
      "id":"gl_html",
      "key":"GL viewer",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/general_ledger_viewer/gl.html"
      }
    },
    {
      "id":"balance_sheet_html",
      "key":"balance sheet from 2015-07-01 to 2018-06-30 (AUD)",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/balance_sheet.html"
      }
    },
    {
      "id":"profit_and_loss_html",
      "key":"profit&loss from 2015-07-01 to 2018-06-30 (AUD)",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/profit_and_loss.html"
      }
    },
    {
      "id":"profit_and_loss_historical_html",
      "key":"profit&loss from 1-01-01 to 2015-06-30 (AUD)",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/profit_and_loss_historical.html"
      }
    },
    {
      "id":"general_ledger_json",
      "key":"General Ledger Report",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/general_ledger.json"
      }
    },
    {
      "id":"investment_report_html",
      "key":"investment report from 2015-07-01 to 2018-06-30 (AUD)",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/investment_report.html"
      }
    },
    {
      "id":"investment_report_json",
      "key":"investment_report.json",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/investment_report.json"
      }
    },
    {
      "id":"investment_report_since_beginning_html",
      "key":"investment report from 1-01-01 to 2018-06-30 (AUD)",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/investment_report_since_beginning.html"
      }
    },
    {
      "id":"investment_report_since_beginning_json",
      "key":"investment_report_since_beginning.json",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/investment_report_since_beginning.json"
      }
    },
    {
      "id":"crosschecks_html",
      "key":"crosschecks",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/crosschecks.html"
      }
    },
    {
      "id":"response_xml",
      "key":"xbrl instance",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/response.xml"
      }
    },
    {
      "id":"request_xml",
      "key":"request_xml",
      "val": {
	"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/request.xml"
      }
    },
    {
      "id":"all",
      "key":"all files",
      "val": {"url":"http://koom-KVM:8080/tmp/1574484860.747959.2/"}
    }
  ]
} --> <!-- 
[] -->

<!--Exchange rates extracted:
[ exchange_rate(date(2018,6,30),'BHP','USD',2),
  exchange_rate(date(2018,6,30),'TLS','AUD',5)
]

Accounts extracted:
[ account('AccountingFees','Expenses','Accounts'/'AccountingFees',0),
  account('Accounts',accountHierarchy,'Accounts'/'Accounts',0),
  account('Assets','NetAssets','Accounts'/'Assets',0),
  account('AssetsLivestock','CurrentAssets','Accounts'/'AssetsLivestock',0),
  account('AssetsLivestockAtAverageCost',
	  'AssetsLivestock',
	  'Accounts' / 'AssetsLivestockAtAverageCost',
	  0),
  account('AssetsLivestockAtCost',
	  'AssetsLivestock',
	  'Accounts' / 'AssetsLivestockAtCost',
	  0),
  account('BankCharges','Expenses','Accounts'/'BankCharges',0),
  account('Banks','CashAndCashEquivalents','Accounts'/'Banks',0),
  account('CapitalIntroduced','Equity','Accounts'/'CapitalIntroduced',0),
  account('CashAndCashEquivalents',
	  'CurrentAssets',
	  'Accounts' / 'CashAndCashEquivalents',
	  0),
  account('ClearingAccount','Revenue','Accounts'/'ClearingAccount',0),
  account('CostOfGoodsLivestock',
	  'Expenses',
	  'Accounts' / 'CostOfGoodsLivestock',
	  0),
  account('CurrencyMovement','Revenue','Accounts'/'CurrencyMovement',0),
  account('CurrentAssets','Assets','Accounts'/'CurrentAssets',0),
  account('CurrentEarnings','RetainedEarnings','Accounts'/'CurrentEarnings',0),
  account('CurrentLiabilities','Liabilities','Accounts'/'CurrentLiabilities',0),
  account('CurrentLoans','CurrentLiabilities','Accounts'/'CurrentLoans',0),
  account('Drawings','Equity','Accounts'/'Drawings',0),
  account('EarningsFinancialInvestments',
	  'OtherIncome',
	  'Accounts' / 'EarningsFinancialInvestments',
	  0),
  account('Equity','Accounts','Accounts'/'Equity',0),
  account('ExchangeGain','OtherIncome','Accounts'/'ExchangeGain',0),
  account('Expenses','NetIncomeLoss','Accounts'/'Expenses',0),
  account('FinancialInvestments',
	  'NoncurrentAssets',
	  'Accounts' / 'FinancialInvestments',
	  0),
  account('ForexLoss','Expenses','Accounts'/'ForexLoss',0),
  account('Gst','CurrentLiabilities','Accounts'/'Gst',0),
  account('GstPayable','Gst','Accounts'/'GstPayable',0),
  account('GstReceivable','Gst','Accounts'/'GstReceivable',0),
  account('HistoricalEarnings',
	  'RetainedEarnings',
	  'Accounts' / 'HistoricalEarnings',
	  0),
  account('Income','Revenue','Accounts'/'Income',0),
  account('InterestEarned','OtherIncome','Accounts'/'InterestEarned',0),
  account('InterestExpenses','Expenses','Accounts'/'InterestExpenses',0),
  account('InterestIncome','OtherIncome','Accounts'/'InterestIncome',0),
  account('InvestmentIncome','Revenue','Accounts'/'InvestmentIncome',0),
  account('Liabilities','NetAssets','Accounts'/'Liabilities',0),
  account('LivestockAdjustment','Expenses','Accounts'/'LivestockAdjustment',0),
  account('NetAssets','Accounts','Accounts'/'NetAssets',0),
  account('NetIncomeLoss','Accounts','Accounts'/'NetIncomeLoss',0),
  account('NoncurrentAssets','Assets','Accounts'/'NoncurrentAssets',0),
  account('NoncurrentLiabilities',
	  'Liabilities',
	  'Accounts' / 'NoncurrentLiabilities',
	  0),
  account('NoncurrentLoans',
	  'NoncurrentLiabilities',
	  'Accounts' / 'NoncurrentLoans',
	  0),
  account('OtherExpenses','Expenses','Accounts'/'OtherExpenses',0),
  account('OtherGain','Revenue','Accounts'/'OtherGain',0),
  account('OtherIncome','Revenue','Accounts'/'OtherIncome',0),
  account('Purchases','Expenses','Accounts'/'Purchases',0),
  account('RationsRevenue','Revenue','Accounts'/'RationsRevenue',0),
  account('RetainedEarnings','Equity','Accounts'/'RetainedEarnings',0),
  account('Revenue','NetIncomeLoss','Accounts'/'Revenue',0),
  account('SalesOfLivestock','Revenue','Accounts'/'SalesOfLivestock',0),
  account('ShareCapital','Equity','Accounts'/'ShareCapital',0)
]

-->


<!--generate system accounts...-->
<!--...generated system accounts-->

<!--Generated accounts:
[ account('Inventory',accountHierarchy,accountHierarchy/'Inventory',0),
  account('LivestockCount','Inventory','Inventory'/'LivestockCount',0),
  account('BanksNationalAustraliaBank',
	  'Banks',
	  'Banks' / 'NationalAustraliaBank',
	  1),
  account('CurrencyMovementNationalAustraliaBank',
	  'CurrencyMovement',
	  'CurrencyMovement' / 'NationalAustraliaBank',
	  0),
  account('CowCogs','CostOfGoodsLivestock','',0),
  account('CowCogsRations','CowCogs','',0),
  account('CowSales','SalesOfLivestock','',0),
  account('CowCount','LivestockCount','',0),
  account('InvestmentIncomeRealized',
	  'InvestmentIncome',
	  'InvestmentIncome' / realized,
	  0),
  account('InvestmentIncomeRealizedOnlyCurrencyMovement',
	  'InvestmentIncomeRealized',
	  'InvestmentIncomeRealized' / onlyCurrencyMovement,
	  0),
  account('InvestmentIncomeRealizedOnlyCurrencyMovementCow',
	  'InvestmentIncomeRealizedOnlyCurrencyMovement',
	  'InvestmentIncomeRealizedOnlyCurrencyMovement' / 'Cow',
	  1),
  account('InvestmentIncomeRealizedWithoutCurrencyMovement',
	  'InvestmentIncomeRealized',
	  'InvestmentIncomeRealized' / withoutCurrencyMovement,
	  0),
  account('InvestmentIncomeRealizedWithoutCurrencyMovementCow',
	  'InvestmentIncomeRealizedWithoutCurrencyMovement',
	  'InvestmentIncomeRealizedWithoutCurrencyMovement' / 'Cow',
	  1),
  account('InvestmentIncomeUnrealized',
	  'InvestmentIncome',
	  'InvestmentIncome' / unrealized,
	  0),
  account('InvestmentIncomeUnrealizedOnlyCurrencyMovement',
	  'InvestmentIncomeUnrealized',
	  'InvestmentIncomeUnrealized' / onlyCurrencyMovement,
	  0),
  account('InvestmentIncomeUnrealizedOnlyCurrencyMovementCow',
	  'InvestmentIncomeUnrealizedOnlyCurrencyMovement',
	  'InvestmentIncomeUnrealizedOnlyCurrencyMovement' / 'Cow',
	  1),
  account('InvestmentIncomeUnrealizedWithoutCurrencyMovement',
	  'InvestmentIncomeUnrealized',
	  'InvestmentIncomeUnrealized' / withoutCurrencyMovement,
	  0),
  account('InvestmentIncomeUnrealizedWithoutCurrencyMovementCow',
	  'InvestmentIncomeUnrealizedWithoutCurrencyMovement',
	  'InvestmentIncomeUnrealizedWithoutCurrencyMovement' / 'Cow',
	  1),
  account('FinancialInvestmentsCow',
	  'FinancialInvestments',
	  'FinancialInvestments' / 'Cow',
	  1)
]

-->



<!--Livestock Events:
[ born('Cow',date(2018,2,3),5),
  born('Cow',date(2018,2,4),5),
  loss('Cow',date(2018,2,1),5),
  rations('Cow',date(2018,2,1),5)
]

Livestock Counts:
[[coord('Cow',29,0)]]

Average_Costs:
[exchange_rate(_,'Cow','AUD',248.88888888888889)]

Average_Costs_Explanations:
[ {}(formula : "(Opening_Value+Purchases_Value+Natural_Increase_Cost_Per_Head*Natural_Increase_Count)/(Opening_Count+Purchases_Count+Natural_Increase_Count)" ',' computation : "(4000 + 7000 + 20 * 10) / (25 + 10 + 10)")
]

Transactions_With_Livestock:
[ transaction(date(2018,2,1),
	      'Introduce_Capital - incoming money',
	      'BanksNationalAustraliaBank',
	      [coord('AUD',20000,0)],
	      instant),
  transaction(date(2018,2,1),
	      'Introduce_Capital',
	      'ShareCapital',
	      [coord('AUD',0.0,20000.0)],
	      instant),
  transaction(date(2018,3,2),
	      'livestock sell',
	      'BanksNationalAustraliaBank',
	      [coord('AUD',7663,0)],
	      instant),
  transaction(date(2018,3,2),
	      'livestock sell',
	      'CowCount',
	      [coord('Cow',0,6)],
	      instant),
  transaction(date(2018,3,2),
	      'livestock buy',
	      'BanksNationalAustraliaBank',
	      [coord('AUD',0,7000)],
	      instant),
  transaction(date(2018,3,2),
	      'livestock buy',
	      'CowCount',
	      [coord('Cow',10,0)],
	      instant),
  transaction(date(2015,7,1),
	      'livestock opening inventory',
	      'AssetsLivestockAtCost',
	      [coord('AUD',4000,0)],
	      instant),
  transaction(date(2015,7,1),
	      'livestock opening inventory',
	      'CapitalIntroduced',
	      [coord('AUD',0,4000)],
	      instant),
  transaction(date(2018,2,3),
	      'livestock born',
	      'CowCount',
	      [coord('Cow',5,0)],
	      instant),
  transaction(date(2018,2,4),
	      'livestock born',
	      'CowCount',
	      [coord('Cow',5,0)],
	      instant),
  transaction(date(2018,2,1),
	      'livestock loss',
	      'CowCount',
	      [coord('Cow',0,5)],
	      instant),
  transaction(date(2018,2,1),
	      'livestock rations',
	      'CowCount',
	      [coord('Cow',0,5)],
	      instant),
  transaction(date(2018,2,1),
	      rations,
	      'Drawings',
	      [coord('AUD',1244.4444444444443,0)],
	      instant),
  transaction(date(2018,2,1),
	      rations,
	      'CowCogsRations',
	      [coord('AUD',0,1244.4444444444443)],
	      instant),
  transaction(date(2018,3,2),
	      'livestock sell',
	      'CowSales',
	      [coord('AUD',0,7663)],
	      instant),
  transaction(date(2018,3,2),
	      'livestock buy',
	      'CowCogs',
	      [coord('AUD',7000,0)],
	      instant)
]

Transaction_Transformation_Debug:
s_transaction(date(2018,2,1),
	      'Introduce_Capital',
	      [coord('AUD',20000,0)],
	      'NationalAustraliaBank',
	      vector([]))==>
date(2018,2,1): BanksNationalAustraliaBank
  Introduce_Capital - incoming money
  DR:U1:coord('AUD',20000,0)

date(2018,2,1): ShareCapital
  Introduce_Capital
  CR:U1:coord('AUD',0.0,20000.0)


====
s_transaction(date(2018,3,2),
	      '',
	      [coord('AUD',7663,0)],
	      'NationalAustraliaBank',
	      vector([coord('Cow',0,6)]))==>
date(2018,3,2): BanksNationalAustraliaBank
  livestock sell
  DR:U2:coord('AUD',7663,0)

date(2018,3,2): CowCount
  livestock sell
  CR:U3:coord('Cow',0,6)


====
s_transaction(date(2018,3,2),
	      '',
	      [coord('AUD',0,7000)],
	      'NationalAustraliaBank',
	      vector([coord('Cow',10,0)]))==>
date(2018,3,2): BanksNationalAustraliaBank
  livestock buy
  CR:U4:coord('AUD',0,7000)

date(2018,3,2): CowCount
  livestock buy
  DR:U5:coord('Cow',10,0)


====
done.

-->


<!-- 
[][] -->

<!--Exchange rates2:
[[],[],[],[],[],[]]

-->


<!-- exchange rates 2:
[exchange_rate(date(2018,6,30),BHP,USD,2),exchange_rate(date(2018,6,30),TLS,AUD,5)]
-->
<!-- compiling Trial balance -->
<!-- compiling Balance sheet -->
<!-- compiling Profit and loss -->
<xbrli:xbrl xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:basic="http://www.xbrlsite.com/basic" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xsi:schemaLocation="http://www.xbrlsite.com/basic taxonomy/basic.xsd http://www.xbrl.org/2003/instance http://www.xbrl.org/2003/xbrl-instance-2003-12-31.xsd http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd http://xbrl.org/2006/xbrldi http://www.xbrl.org/2006/xbrldi-2006.xsd">
  <link:schemaRef xlink:type="simple" xlink:href="taxonomy/basic.xsd" xlink:title="Taxonomy schema" />
  <link:linkbaseRef xlink:type="simple" xlink:href="taxonomy/basic-formulas.xml" xlink:arcrole="http://www.w3.org/1999/xlink/properties/linkbase" />
  <link:linkBaseRef xlink:type="simple" xlink:href="taxonomy/basic-formulas-cross-checks.xml" xlink:arcrole="http://www.w3.org/1999/xlink/properties/linkbase" />

<!-- 'AUD' -->
  <xbrli:unit id="U-AUD"><xbrli:measure>iso4217:AUD</xbrli:measure></xbrli:unit>


<xbrli:context id="I-2018">
	<xbrli:period>
		<xbrli:instant>2018-06-30</xbrli:instant>
	</xbrli:period>
	<xbrli:entity>
		<identifier scheme="http://www.example.com">TestData</identifier>
	</xbrli:entity>
</xbrli:context>
<xbrli:context id="D-2018">
	<xbrli:period>
		<xbrli:startDate>2015-07-01</xbrli:startDate>
		<xbrli:endDate>2018-06-30</xbrli:endDate>
	</xbrli:period>
	<xbrli:entity>
		<identifier scheme="http://www.example.com">TestData</identifier>
	</xbrli:entity>
</xbrli:context>
<xbrli:context id="I-2018-NationalAustraliaBank">
	<xbrli:period>
		<xbrli:instant>2018-06-30</xbrli:instant>
	</xbrli:period>
	<xbrli:entity>
		<identifier scheme="http://www.example.com">TestData</identifier>
	</xbrli:entity>
		<xbrli:scenario>
			<xbrldi:typedMember dimension="basic:Dimension_BankAccounts_Instant">
			<basic:BankAccount_Instant><name>BanksNationalAustraliaBank</name><value>10000</value></basic:BankAccount_Instant>
			</xbrldi:typedMember>
		</xbrli:scenario>
</xbrli:context>
<xbrli:context id="D-2018-NationalAustraliaBank">
	<xbrli:period>
		<xbrli:startDate>2015-07-01</xbrli:startDate>
		<xbrli:endDate>2018-06-30</xbrli:endDate>
	</xbrli:period>
	<xbrli:entity>
		<identifier scheme="http://www.example.com">TestData</identifier>
		<xbrli:segment>
			<xbrldi:typedMember dimension="basic:Dimension_BankAccounts_Duration">
			<basic:BankAccount_Duration>NationalAustraliaBank</basic:BankAccount_Duration>
			</xbrldi:typedMember>
		</xbrli:segment>
	</xbrli:entity>
</xbrli:context>
<xbrli:context id="D-2018-Cow">
	<xbrli:period>
		<xbrli:startDate>2015-07-01</xbrli:startDate>
		<xbrli:endDate>2018-06-30</xbrli:endDate>
	</xbrli:period>
	<xbrli:entity>
		<identifier scheme="http://www.example.com">TestData</identifier>
		<xbrli:segment>
			<xbrldi:typedMember dimension="basic:Dimension_Investments_Duration">
			<basic:Investment_Duration>Cow</basic:Investment_Duration>
			</xbrldi:typedMember>
		</xbrli:segment>
	</xbrli:entity>
</xbrli:context>


<!-- dimensional facts: -->
  <basic:Banks contextRef="I-2018-NationalAustraliaBank" unitRef="U-AUD" decimals="INF">20,663.00</basic:Banks>

<!-- balance sheet: -->
 <basic:NetAssets contextRef="I-2018" unitRef="U-AUD" decimals="INF">24,663.00</basic:NetAssets>
  <basic:Assets contextRef="I-2018" unitRef="U-AUD" decimals="INF">24,663.00</basic:Assets>
   <basic:CurrentAssets contextRef="I-2018" unitRef="U-AUD" decimals="INF">24,663.00</basic:CurrentAssets>
    <basic:AssetsLivestock contextRef="I-2018" unitRef="U-AUD" decimals="INF">4,000.00</basic:AssetsLivestock>
     <basic:AssetsLivestockAtCost contextRef="I-2018" unitRef="U-AUD" decimals="INF">4,000.00</basic:AssetsLivestockAtCost>
    <basic:CashAndCashEquivalents contextRef="I-2018" unitRef="U-AUD" decimals="INF">20,663.00</basic:CashAndCashEquivalents>
     <basic:Banks contextRef="I-2018" unitRef="U-AUD" decimals="INF">20,663.00</basic:Banks>
 <basic:Equity contextRef="I-2018" unitRef="U-AUD" decimals="INF">24,663.00</basic:Equity>
  <basic:CapitalIntroduced contextRef="I-2018" unitRef="U-AUD" decimals="INF">4,000.00</basic:CapitalIntroduced>
  <basic:Drawings contextRef="I-2018" unitRef="U-AUD" decimals="INF">-1,244.44</basic:Drawings>
  <basic:RetainedEarnings contextRef="I-2018" unitRef="U-AUD" decimals="INF">1,907.44</basic:RetainedEarnings>
   <basic:CurrentEarnings contextRef="I-2018" unitRef="U-AUD" decimals="INF">1,907.44</basic:CurrentEarnings>
  <basic:ShareCapital contextRef="I-2018" unitRef="U-AUD" decimals="INF">20,000.00</basic:ShareCapital>

<!-- profit and loss: -->
 <basic:NetIncomeLoss contextRef="D-2018" unitRef="U-AUD" decimals="INF">1,907.44</basic:NetIncomeLoss>
  <basic:Expenses contextRef="D-2018" unitRef="U-AUD" decimals="INF">5,755.56</basic:Expenses>
   <basic:CostOfGoodsLivestock contextRef="D-2018" unitRef="U-AUD" decimals="INF">5,755.56</basic:CostOfGoodsLivestock>
    <basic:CowCogs contextRef="D-2018" unitRef="U-AUD" decimals="INF">5,755.56</basic:CowCogs>
     <basic:CowCogsRations contextRef="D-2018" unitRef="U-AUD" decimals="INF">-1,244.44</basic:CowCogsRations>
  <basic:Revenue contextRef="D-2018" unitRef="U-AUD" decimals="INF">7,663.00</basic:Revenue>
   <basic:SalesOfLivestock contextRef="D-2018" unitRef="U-AUD" decimals="INF">7,663.00</basic:SalesOfLivestock>
    <basic:CowSales contextRef="D-2018" unitRef="U-AUD" decimals="INF">7,663.00</basic:CowSales>

<!-- historical profit and loss (fixme wrong context id): 
 <basic:NetIncomeLoss contextRef="D-2018" unitRef="U-AUD" decimals="INF">0.00</basic:NetIncomeLoss>

-->

<!-- trial balance: -->
 <basic:Trial_Balance contextRef="I-2018" unitRef="U-AUD" decimals="INF">0.00</basic:Trial_Balance>

</xbrli:xbrl>
<!-- 
[]
[] -->


